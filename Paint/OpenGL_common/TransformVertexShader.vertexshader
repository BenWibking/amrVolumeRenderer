// miniGraphics is distributed under the OSI-approved BSD 3-clause License.
// See LICENSE.txt for details.
//
// Copyright (c) 2017
// National Technology & Engineering Solutions of Sandia, LLC (NTESS). Under
// the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
// certain rights in this software.

R"(
#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec3 vertexColor;

// Output data ; will be interpolated for each fragment.
out vec3 fragmentColor;
// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat3 normalTransform;

void main() {
  // Output position of the vertex, in clip space : MVP * position
  gl_Position = MVP * vec4(vertexPosition_modelspace, 1);

  // Compute how bright a headlight shines on the surface
  vec3 normal_worldspace = normalTransform * vertexNormal_modelspace;
  float brightness = abs(dot(normal_worldspace, vec3(0, 0, 1)));

  // The color of each vertex will be interpolated
  // to produce the color of each fragment
  fragmentColor = vertexColor * brightness;
}
)"
